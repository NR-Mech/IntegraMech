// <auto-generated />
using System;
using Mech.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(MechDbContext))]
    [Migration("20240603235041_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mech")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mech.Domain.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EstadoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_cidades");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("ix_cidades_estado_id");

                    b.ToTable("cidades", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EstadoId = "PE",
                            Nome = "Caruaru"
                        },
                        new
                        {
                            Id = 2L,
                            EstadoId = "PE",
                            Nome = "Recife"
                        },
                        new
                        {
                            Id = 3L,
                            EstadoId = "SP",
                            Nome = "Marília"
                        },
                        new
                        {
                            Id = 4L,
                            EstadoId = "PE",
                            Nome = "Santa Cruz do Capibaribe"
                        });
                });

            modelBuilder.Entity("Mech.Domain.Departamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_departamentos");

                    b.ToTable("departamentos", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descricao = "Departamento de Urgência e Emergência",
                            Nome = "Urgência e Emergência"
                        },
                        new
                        {
                            Id = 2L,
                            Descricao = "Departamento de Administração",
                            Nome = "Administração"
                        },
                        new
                        {
                            Id = 3L,
                            Descricao = "Departamento de Recursos Humanos",
                            Nome = "Recursos Humanos"
                        },
                        new
                        {
                            Id = 4L,
                            Descricao = "Departamento de Apoio Terapêutico",
                            Nome = "Apoio Terapêutico"
                        });
                });

            modelBuilder.Entity("Mech.Domain.DepartamentoMedico", b =>
                {
                    b.Property<long>("DepartamentoId")
                        .HasColumnType("bigint")
                        .HasColumnName("departamento_id");

                    b.Property<long>("MedicoId")
                        .HasColumnType("bigint")
                        .HasColumnName("medico_id");

                    b.HasKey("DepartamentoId", "MedicoId")
                        .HasName("pk_departamentos__medicos");

                    b.HasIndex("MedicoId")
                        .HasDatabaseName("ix_departamentos__medicos_medico_id");

                    b.ToTable("departamentos__medicos", "mech");

                    b.HasData(
                        new
                        {
                            DepartamentoId = 1L,
                            MedicoId = 1L
                        },
                        new
                        {
                            DepartamentoId = 1L,
                            MedicoId = 2L
                        },
                        new
                        {
                            DepartamentoId = 1L,
                            MedicoId = 3L
                        },
                        new
                        {
                            DepartamentoId = 2L,
                            MedicoId = 2L
                        });
                });

            modelBuilder.Entity("Mech.Domain.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bairro");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cep");

                    b.Property<long>("CidadeId")
                        .HasColumnType("bigint")
                        .HasColumnName("cidade_id");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rua");

                    b.HasKey("Id")
                        .HasName("pk_enderecos");

                    b.HasIndex("CidadeId")
                        .HasDatabaseName("ix_enderecos_cidade_id");

                    b.ToTable("enderecos", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Bairro = "Centenário",
                            CEP = "5861618",
                            CidadeId = 1L,
                            Rua = "Paulo Afonso"
                        },
                        new
                        {
                            Id = 2L,
                            Bairro = "Janga",
                            CEP = "6746816",
                            CidadeId = 2L,
                            Rua = "Walter de Afogados"
                        });
                });

            modelBuilder.Entity("Mech.Domain.Especialidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_especialidades");

                    b.ToTable("especialidades", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nome = "Alergia e Imunologia"
                        },
                        new
                        {
                            Id = 2L,
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = 3L,
                            Nome = "Cirurgia Oncológica"
                        },
                        new
                        {
                            Id = 4L,
                            Nome = "Geriatria"
                        },
                        new
                        {
                            Id = 5L,
                            Nome = "Homeopatia"
                        });
                });

            modelBuilder.Entity("Mech.Domain.Estadia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataDaAdmissao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_da_admissao");

                    b.Property<DateTime?>("DataDaAlta")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_da_alta");

                    b.Property<long>("MedicoId")
                        .HasColumnType("bigint")
                        .HasColumnName("medico_id");

                    b.Property<string>("MotivoDaAdmissao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("motivo_da_admissao");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint")
                        .HasColumnName("paciente_id");

                    b.Property<long>("QuartoId")
                        .HasColumnType("bigint")
                        .HasColumnName("quarto_id");

                    b.HasKey("Id")
                        .HasName("pk_estadias");

                    b.HasIndex("MedicoId")
                        .HasDatabaseName("ix_estadias_medico_id");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_estadias_paciente_id");

                    b.HasIndex("QuartoId")
                        .HasDatabaseName("ix_estadias_quarto_id");

                    b.ToTable("estadias", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataDaAdmissao = new DateTime(2024, 6, 2, 20, 50, 41, 664, DateTimeKind.Local).AddTicks(6827),
                            MedicoId = 1L,
                            MotivoDaAdmissao = "Coma alcoólico / deu PT",
                            PacienteId = 1L,
                            QuartoId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DataDaAdmissao = new DateTime(2024, 5, 4, 20, 50, 41, 664, DateTimeKind.Local).AddTicks(6845),
                            DataDaAlta = new DateTime(2024, 5, 24, 20, 50, 41, 664, DateTimeKind.Local).AddTicks(6845),
                            MedicoId = 2L,
                            MotivoDaAdmissao = "Transplante de coração",
                            PacienteId = 2L,
                            QuartoId = 3L
                        });
                });

            modelBuilder.Entity("Mech.Domain.Estado", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_estados");

                    b.ToTable("estados", "mech");

                    b.HasData(
                        new
                        {
                            Id = "AC",
                            Nome = "Acre"
                        },
                        new
                        {
                            Id = "AL",
                            Nome = "Alagoas"
                        },
                        new
                        {
                            Id = "AP",
                            Nome = "Amapá"
                        },
                        new
                        {
                            Id = "AM",
                            Nome = "Amazonas"
                        },
                        new
                        {
                            Id = "BA",
                            Nome = "Bahia"
                        },
                        new
                        {
                            Id = "CE",
                            Nome = "Ceará"
                        },
                        new
                        {
                            Id = "DF",
                            Nome = "Distrito Federal"
                        },
                        new
                        {
                            Id = "ES",
                            Nome = "Espirito Santo"
                        },
                        new
                        {
                            Id = "GO",
                            Nome = "Goiás"
                        },
                        new
                        {
                            Id = "MA",
                            Nome = "Maranhão"
                        },
                        new
                        {
                            Id = "MS",
                            Nome = "Mato Grosso do Sul"
                        },
                        new
                        {
                            Id = "MT",
                            Nome = "Mato Grosso"
                        },
                        new
                        {
                            Id = "MG",
                            Nome = "Minas Gerais"
                        },
                        new
                        {
                            Id = "PA",
                            Nome = "Pará"
                        },
                        new
                        {
                            Id = "PB",
                            Nome = "Paraíba"
                        },
                        new
                        {
                            Id = "PR",
                            Nome = "Paraná"
                        },
                        new
                        {
                            Id = "PE",
                            Nome = "Pernambuco"
                        },
                        new
                        {
                            Id = "PI",
                            Nome = "Piauí"
                        },
                        new
                        {
                            Id = "RJ",
                            Nome = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = "RN",
                            Nome = "Rio Grande do Norte"
                        },
                        new
                        {
                            Id = "RS",
                            Nome = "Rio Grande do Sul"
                        },
                        new
                        {
                            Id = "RO",
                            Nome = "Rondônia"
                        },
                        new
                        {
                            Id = "RR",
                            Nome = "Roraima"
                        },
                        new
                        {
                            Id = "SC",
                            Nome = "Santa Catarina"
                        },
                        new
                        {
                            Id = "SP",
                            Nome = "São Paulo"
                        },
                        new
                        {
                            Id = "SE",
                            Nome = "Sergipe"
                        },
                        new
                        {
                            Id = "TO",
                            Nome = "Tocantins"
                        });
                });

            modelBuilder.Entity("Mech.Domain.Genero", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_generos");

                    b.ToTable("generos", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nome = "Feminino"
                        },
                        new
                        {
                            Id = 2L,
                            Nome = "Masculino"
                        });
                });

            modelBuilder.Entity("Mech.Domain.Medico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crm");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_medicos");

                    b.ToTable("medicos", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CRM = "852456/SP",
                            Nome = "Dr. Hans Chucrutes"
                        },
                        new
                        {
                            Id = 2L,
                            CRM = "159753/PE",
                            Nome = "Dr. Chico Science"
                        },
                        new
                        {
                            Id = 3L,
                            CRM = "354961/RJ",
                            Nome = "Dr. Zeca Pagodinho"
                        });
                });

            modelBuilder.Entity("Mech.Domain.MedicoEspecialidade", b =>
                {
                    b.Property<long>("MedicoId")
                        .HasColumnType("bigint")
                        .HasColumnName("medico_id");

                    b.Property<long>("EspecialidadeId")
                        .HasColumnType("bigint")
                        .HasColumnName("especialidade_id");

                    b.HasKey("MedicoId", "EspecialidadeId")
                        .HasName("pk_medicos__especialidades");

                    b.HasIndex("EspecialidadeId")
                        .HasDatabaseName("ix_medicos__especialidades_especialidade_id");

                    b.ToTable("medicos__especialidades", "mech");

                    b.HasData(
                        new
                        {
                            MedicoId = 1L,
                            EspecialidadeId = 1L
                        },
                        new
                        {
                            MedicoId = 1L,
                            EspecialidadeId = 2L
                        },
                        new
                        {
                            MedicoId = 1L,
                            EspecialidadeId = 3L
                        },
                        new
                        {
                            MedicoId = 1L,
                            EspecialidadeId = 4L
                        },
                        new
                        {
                            MedicoId = 2L,
                            EspecialidadeId = 1L
                        },
                        new
                        {
                            MedicoId = 3L,
                            EspecialidadeId = 5L
                        });
                });

            modelBuilder.Entity("Mech.Domain.Paciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CNS")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cns");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cpf");

                    b.Property<DateOnly>("DataDeNascimento")
                        .HasColumnType("date")
                        .HasColumnName("data_de_nascimento");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("endereco_id");

                    b.Property<long>("GeneroId")
                        .HasColumnType("bigint")
                        .HasColumnName("genero_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_pacientes");

                    b.HasIndex("EnderecoId")
                        .HasDatabaseName("ix_pacientes_endereco_id");

                    b.HasIndex("GeneroId")
                        .HasDatabaseName("ix_pacientes_genero_id");

                    b.ToTable("pacientes", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CNS = "4684686781",
                            CPF = "05531923023",
                            DataDeNascimento = new DateOnly(1944, 2, 14),
                            EnderecoId = 1L,
                            GeneroId = 2L,
                            Nome = "Reginaldo Rossi"
                        },
                        new
                        {
                            Id = 2L,
                            CNS = "6186168168",
                            CPF = "29328343046",
                            DataDeNascimento = new DateOnly(1950, 4, 2),
                            EnderecoId = 2L,
                            GeneroId = 2L,
                            Nome = "Faustão"
                        },
                        new
                        {
                            Id = 3L,
                            CNS = "8451947367",
                            CPF = "48993836060",
                            DataDeNascimento = new DateOnly(1980, 9, 18),
                            EnderecoId = 2L,
                            GeneroId = 1L,
                            Nome = "Raquel Dos Teclados"
                        });
                });

            modelBuilder.Entity("Mech.Domain.Quarto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("EstaOcupado")
                        .HasColumnType("boolean")
                        .HasColumnName("esta_ocupado");

                    b.Property<long>("TipoId")
                        .HasColumnType("bigint")
                        .HasColumnName("tipo_id");

                    b.HasKey("Id")
                        .HasName("pk_quartos");

                    b.HasIndex("TipoId")
                        .HasDatabaseName("ix_quartos_tipo_id");

                    b.ToTable("quartos", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EstaOcupado = true,
                            TipoId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            EstaOcupado = false,
                            TipoId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            EstaOcupado = true,
                            TipoId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            EstaOcupado = false,
                            TipoId = 3L
                        });
                });

            modelBuilder.Entity("Mech.Domain.TipoDeQuarto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_tipos_de_quarto");

                    b.ToTable("tipos_de_quarto", "mech");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nome = "UTI"
                        },
                        new
                        {
                            Id = 2L,
                            Nome = "Leito Clínico"
                        },
                        new
                        {
                            Id = 3L,
                            Nome = "Leito Cirúrgico"
                        });
                });

            modelBuilder.Entity("Mech.Domain.Cidade", b =>
                {
                    b.HasOne("Mech.Domain.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cidades_estado_estado_id");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Mech.Domain.DepartamentoMedico", b =>
                {
                    b.HasOne("Mech.Domain.Departamento", null)
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departamentos__medicos_departamentos_departamento_id");

                    b.HasOne("Mech.Domain.Medico", null)
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departamentos__medicos_medicos_medico_id");
                });

            modelBuilder.Entity("Mech.Domain.Endereco", b =>
                {
                    b.HasOne("Mech.Domain.Cidade", null)
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enderecos_cidades_cidade_id");
                });

            modelBuilder.Entity("Mech.Domain.Estadia", b =>
                {
                    b.HasOne("Mech.Domain.Medico", null)
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_estadias_medicos_medico_id");

                    b.HasOne("Mech.Domain.Paciente", null)
                        .WithMany("Estadias")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_estadias_pacientes_paciente_id");

                    b.HasOne("Mech.Domain.Quarto", null)
                        .WithMany()
                        .HasForeignKey("QuartoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_estadias_quartos_quarto_id");
                });

            modelBuilder.Entity("Mech.Domain.MedicoEspecialidade", b =>
                {
                    b.HasOne("Mech.Domain.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medicos__especialidades_especialidades_especialidade_id");

                    b.HasOne("Mech.Domain.Medico", null)
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medicos__especialidades_medicos_medico_id");
                });

            modelBuilder.Entity("Mech.Domain.Paciente", b =>
                {
                    b.HasOne("Mech.Domain.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pacientes_endereco_endereco_id");

                    b.HasOne("Mech.Domain.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pacientes_generos_genero_id");

                    b.Navigation("Endereco");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("Mech.Domain.Quarto", b =>
                {
                    b.HasOne("Mech.Domain.TipoDeQuarto", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quartos_tipo_de_quarto_tipo_id");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Mech.Domain.Paciente", b =>
                {
                    b.Navigation("Estadias");
                });
#pragma warning restore 612, 618
        }
    }
}
